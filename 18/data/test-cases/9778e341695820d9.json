{"uid":"9778e341695820d9","name":"test_table_page_sortable_fat","fullName":"tests.test_table_page.TestTablePage#test_table_page_sortable_fat","historyId":"433da3b64f9916b240df558841631599","time":{"start":1717657862362,"stop":1717657863083,"duration":721},"status":"failed","statusMessage":"AssertionError: Неверная сортировка для столбца Fat (g)","statusTrace":"self = <tests.test_table_page.TestTablePage object at 0x7f730655ace0>\nbrowser = <Page url='https://letcode.in/table'>\n\n    def test_table_page_sortable_fat(self, browser):\n        table_page = TablePage(browser)\n        table_page.navigate()\n        table_page.sort_column(TablePageData.FAT, TablePageData.DESCENDING)\n>       table_page.expect_sort_column(TablePageData.FAT, TablePageData.DESCENDING)\n\ntests/test_table_page.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.table_page.TablePage object at 0x7f73065bc880>, column = 'Fat (g)'\ndirection = 'descending'\n\n    def expect_sort_column(self, column: str, direction: str):\n        with allure.step(f'Проверка сортировки стобца {column} в направлении {direction}'):\n            index = 0\n            match column:\n                case self.data.DESSERT:\n                    index = 0\n                case self.data.CALORIES:\n                    index = 1\n                case self.data.FAT:\n                    index = 2\n                case self.data.CARBS:\n                    index = 3\n                case self.data.PROTEIN:\n                    index = 4\n                case self.data.CHOLESTEROL:\n                    index = 5\n            col = []\n            rows = self.page.locator(self.locators.ROWS_SORT_TABLE).all()\n            for row in rows:\n                col.append(row.all_inner_texts()[0].split('\\t\\n')[index])\n            if direction == self.data.ASCENDING:\n                assert col == sorted(col), f'{Errors.SORT_ERROR} столбца {column}'\n            elif direction == self.data.DESCENDING:\n>               assert col == sorted(col, reverse=True), f'{Errors.SORT_ERROR} столбца {column}'\nE               AssertionError: Неверная сортировка для столбца Fat (g)\n\npages/table_page.py:70: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1717657809662,"stop":1717657809663,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_session_faker","time":{"start":1717657809663,"stop":1717657809723,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1717657809663,"stop":1717657809663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1717657862009,"stop":1717657862362,"duration":353},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Неверная сортировка для столбца Fat (g)","statusTrace":"self = <tests.test_table_page.TestTablePage object at 0x7f730655ace0>\nbrowser = <Page url='https://letcode.in/table'>\n\n    def test_table_page_sortable_fat(self, browser):\n        table_page = TablePage(browser)\n        table_page.navigate()\n        table_page.sort_column(TablePageData.FAT, TablePageData.DESCENDING)\n>       table_page.expect_sort_column(TablePageData.FAT, TablePageData.DESCENDING)\n\ntests/test_table_page.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.table_page.TablePage object at 0x7f73065bc880>, column = 'Fat (g)'\ndirection = 'descending'\n\n    def expect_sort_column(self, column: str, direction: str):\n        with allure.step(f'Проверка сортировки стобца {column} в направлении {direction}'):\n            index = 0\n            match column:\n                case self.data.DESSERT:\n                    index = 0\n                case self.data.CALORIES:\n                    index = 1\n                case self.data.FAT:\n                    index = 2\n                case self.data.CARBS:\n                    index = 3\n                case self.data.PROTEIN:\n                    index = 4\n                case self.data.CHOLESTEROL:\n                    index = 5\n            col = []\n            rows = self.page.locator(self.locators.ROWS_SORT_TABLE).all()\n            for row in rows:\n                col.append(row.all_inner_texts()[0].split('\\t\\n')[index])\n            if direction == self.data.ASCENDING:\n                assert col == sorted(col), f'{Errors.SORT_ERROR} столбца {column}'\n            elif direction == self.data.DESCENDING:\n>               assert col == sorted(col, reverse=True), f'{Errors.SORT_ERROR} столбца {column}'\nE               AssertionError: Неверная сортировка для столбца Fat (g)\n\npages/table_page.py:70: AssertionError","steps":[{"name":"Переход на страницу https://letcode.in/table","time":{"start":1717657862362,"stop":1717657862746,"duration":384},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Отсортировать столбец Fat (g) по направлению descending","time":{"start":1717657862746,"stop":1717657863048,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"Проверка сортировки стобца Fat (g) в направлении descending","time":{"start":1717657863048,"stop":1717657863083,"duration":35},"status":"failed","statusMessage":"AssertionError: Неверная сортировка для столбца Fat (g)\n","statusTrace":"  File \"/__w/playwright_ui_tests/playwright_ui_tests/pages/table_page.py\", line 70, in expect_sort_column\n    assert col == sorted(col, reverse=True), f'{Errors.SORT_ERROR} столбца {column}'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":3,"attachmentsCount":0,"hasContent":true},"afterStages":[{"name":"browser::0","time":{"start":1717657863088,"stop":1717657863144,"duration":56},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_table_page"},{"name":"subSuite","value":"TestTablePage"},{"name":"host","value":"9a24d63ae709"},{"name":"thread","value":"1361-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_table_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"9778e341695820d9.json","parameterValues":[]}